// ===============================
// Plugins
// ===============================
plugins {
  id 'nf-wave'   // Wave plugin for container resolution
}

// ===============================
// Defaults (params)
// NOTE: These are generic placeholders. For real runs,
//       pass --reads/--ref/--outdir on the CLI or use -profile demo.
// ===============================
params {
  reads       = 'data/*_{R1,R2}.fastq.gz'
  ref         = 'ref/ref.fa'
  outdir      = 'results'
  max_cpus    = 2
  ploidy      = 2
  do_filter   = false
  filter_expr = 'QUAL>=30 && DP>=5'
}

// ===============================
// Profiles
// ===============================
profiles {
  // Wave-only runtime (RECOMMENDED)
  wave {
    process.executor = 'local'

    // Use Wave to build containers from Conda recipes (remotely)
    wave.enabled  = true
    wave.force    = true
    wave.strategy = 'conda'        // important: build from env_*.yml
    wave.engine   = 'singularity'  // run locally with Apptainer/Singularity
    // wave.freezeContainers = true    // optional: pin built images
    // wave.strictPull       = true    // optional: fail if image not resolvable
    // wave.cacheDir         = "$projectDir/.wave" // optional: persistent cache

    // Local runtime: Singularity/Apptainer (WSL2-friendly)
    singularity.enabled     = true
    singularity.autoMounts  = true
    singularity.cacheDir    = "$projectDir/.singularity"

    // Do NOT use local conda or docker in this profile
    conda.enabled  = false
    docker.enabled = false
  }

  // -------- Convenience profiles (compose with: -profile wave,demo or -profile wave,user) -----

  // Demo profile: tiny bundled dataset — pre-filled paths for a one-liner
  demo {
    params.reads  = "$projectDir/data/demo_fastqs/*_{R1,R2}.fastq.gz"
    params.ref    = "$projectDir/ref/demo_ref/demo.fa"
    params.outdir = "$projectDir/results_demo"
  }

  // User profile: runtime only — intentionally *no* paths here.
  // Users must pass their own --reads/--ref/--outdir on the CLI.
  user {
    // Intentionally empty (inherits runtime from 'wave' when composed)
  }
}

// ===============================
// Process defaults
// ===============================
process {
  shell  = ['/bin/bash', '-ueo', 'pipefail']
  cpus   = { params.max_cpus as int }
  memory = '2 GB'
  errorStrategy = 'retry'
  maxRetries    = 1

  // Publish to outdir as links (saves space); override per-process if needed
  publishDir = [ path: { params.outdir }, mode: 'link', overwrite: true ]

  // Tell Wave which Conda recipes to build from (no local conda solve)
  withName: r1_variant_splitter {
    conda = "$projectDir/env_tools.yml"
  }
  withName: vcf_norm_filter {
    conda = "$projectDir/env_tools.yml"
  }
  withName: multiqc {
    conda = "$projectDir/env_multiqc.yml"
  }
}

// ===============================
// Work dir & run reports
// ===============================
workDir = 'work'

timeline { enabled = true; file = 'pipeline_timeline.html'; overwrite = true }
trace    { enabled = true; file = 'pipeline_trace.txt';    overwrite = true }
report   { enabled = true; file = 'pipeline_report.html';  overwrite = true }
dag      { enabled = true; file = 'pipeline_dag.svg';      overwrite = true }
